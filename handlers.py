# handlers.py ‚Äî X·ª≠ l√Ω l·ªánh ng∆∞·ªùi d√πng & nh√≥m cho QLottery_bot

import re
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters

from db import (
    get_user,
    ensure_user,
    insert_or_update_bet,
    get_group,
    update_balance,
    get_user_bet_in_round,
)
from utils import (
    get_current_round_id,
    format_money,
)

# ----------- C·∫§U H√åNH -----------
MIN_BET = 5000  # M·ª©c c∆∞·ª£c t·ªëi thi·ªÉu

# ----------- H·ªñ TR·ª¢ -----------

def parse_bet_command(text: str):
    """
    Tr·∫£ v·ªÅ (bet_type, bet_value, amount) n·∫øu h·ª£p l·ªá.
    H·ªó tr·ª£:
    /N1000 /L5000 /C20000 /Le10000
    /S123456 1000
    """
    text = text.strip()

    # L·ªõn / Nh·ªè / Ch·∫µn / L·∫ª
    m = re.match(r"^/(N|L|C|Le)(\d+)$", text, re.IGNORECASE)
    if m:
        bet_type = m.group(1).upper()
        amount = int(m.group(2))
        return bet_type, bet_type, amount

    # ƒê·∫∑t s·ªë c·ª• th·ªÉ: /S123456 1000
    m = re.match(r"^/S(\d{1,6})\s+(\d+)$", text, re.IGNORECASE)
    if m:
        bet_value = m.group(1)
        amount = int(m.group(2))
        return "S", bet_value, amount

    return None

# ----------- ƒê·∫∂T C∆Ø·ª¢C TRONG NH√ìM -----------

async def group_bet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    chat = update.effective_chat
    user = update.effective_user

    # Ch·ªâ x·ª≠ l√Ω trong group
    if chat.type not in ("group", "supergroup"):
        return
    if not msg.text:
        return

    parsed = parse_bet_command(msg.text)
    if not parsed:
        return

    bet_type, bet_value, amount = parsed

    # Ki·ªÉm tra m·ª©c c∆∞·ª£c
    if amount < MIN_BET:
        await msg.reply_text(f"‚ö†Ô∏è M·ª©c c∆∞·ª£c t·ªëi thi·ªÉu l√† {format_money(MIN_BET)}")
        return

    # ƒê·∫£m b·∫£o user t·ªìn t·∫°i trong DB
    ensure_user(user.id, user.username or "", user.first_name or "")
    u = get_user(user.id)
    if not u:
        await msg.reply_text("‚ùå L·ªói ng∆∞·ªùi d√πng, h√£y /start tr∆∞·ªõc khi c∆∞·ª£c.")
        return

    if u["balance"] < amount:
        await msg.reply_text("üí∏ S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.")
        return

    # Ki·ªÉm tra group ƒë√£ ƒë∆∞·ª£c duy·ªát ch·∫°y ch∆∞a
    g = get_group(chat.id)
    if not g or g["approved"] != 1:
        await msg.reply_text("‚õî Nh√≥m n√†y ch∆∞a ƒë∆∞·ª£c admin duy·ªát ƒë·ªÉ bot ho·∫°t ƒë·ªông.")
        return

    # X√°c ƒë·ªãnh round hi·ªán t·∫°i
    round_id = get_current_round_id(chat.id)

    # ‚ùå Ki·ªÉm tra c∆∞·ª£c ng∆∞·ª£c
    if bet_type in ("N", "L"):
        opposite = "L" if bet_type == "N" else "N"
    elif bet_type in ("C", "LE"):
        opposite = "LE" if bet_type == "C" else "C"
    else:
        opposite = None

    if opposite:
        opposite_bet = get_user_bet_in_round(user.id, chat.id, round_id, opposite, opposite)
        if opposite_bet:
            await msg.reply_text("üö´ B·∫°n kh√¥ng th·ªÉ c∆∞·ª£c ng∆∞·ª£c trong c√πng m·ªôt phi√™n!")
            return

    # Ki·ªÉm tra v√© c≈©
    existing_bet = get_user_bet_in_round(user.id, chat.id, round_id, bet_type, bet_value)

    # C·∫≠p nh·∫≠t c∆∞·ª£c
    insert_or_update_bet(chat.id, round_id, user.id, bet_type, bet_value, amount)
    new_balance = u["balance"] - amount
    update_balance(user.id, new_balance)

    if existing_bet:
        reply_text = f"‚úÖ ƒê√£ c·ªông d·ªìn c∆∞·ª£c {bet_type} {format_money(amount)}"
    else:
        reply_text = f"‚úÖ ƒê√£ c∆∞·ª£c {bet_type} {format_money(amount)} cho phi√™n n√†y."

    await msg.reply_text(reply_text)

# ----------- ƒêƒÇNG K√ù HANDLERS -----------

def register_group_handlers(app):
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, group_bet_handler))
    app.add_handler(MessageHandler(filters.COMMAND, group_bet_handler))

def register_user_handlers(app):
    pass
